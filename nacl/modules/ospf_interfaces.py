
#!/usr/bin/python3
#
# Maximilian Wilhelm <max@sdn.clinic>
#  --  Mon 01 Apr 2024 16:39:42 CET
#
from typing import Optional

from nacl.modules import BaseModule

class Module(BaseModule):
    def should_run (self, node_config) -> bool:
        """Returns whether this module should run for the given node_config.

        Parameters
        ----------
        node_config:
            A node_config dict containing the NACL node configuration generated so far.

        Returns
        -------
            bool
        """
        our_roles = node_config.get("roles", [])

        return "router" in our_roles

    def run (self, nodes: dict, minion_id: str) -> Optional[dict]:
        """Execute the module for the given node_id.

        Parameters
        ----------
        nodes:
            A dictionary containing all node_configs by their respective minion_id.

        minion_id:
            The Salt minion ID of the minion we should compute the configuraton for.

        Returns
        -------
        dict, optional:
            A dictionary containing the configuration items generated by this module.
            Items are identified by a hierarchical key with elements separated by dots,
            e.g. routing.bgp.internal.peers or wireguard.
            A return value of None may be used to indicate that no configuration has been generated.
        """
        node_config = nodes[minion_id]
        infra_domain = self.nacl_config.get('DNS', {}).get('infra_domain')
        ifaces_down_OK = []

        for ifname in sorted(node_config['ifaces'].keys()):
            iface_config = node_config['ifaces'][ifname]

            # Interface marked as planned/offline in NetBox?
            if iface_config.get ('status', '') in [ 'planned', 'offline' ]:
                ifaces_down_OK.append(ifname)
                continue
            
            # Wireguard tunnel?
            if ifname.startswith("wg-"):
                peer = "%s.%s" % (ifname[3:], infra_domain)
                peer_config = nodes.get(peer)
                if not peer_config:
                    continue
              
                if peer_config.get ('status', '') != 'active':
                    ifaces_down_OK.append(ifname)

        return {
            "routing.ospf.ifaces_down_ok": ifaces_down_OK
        }
        